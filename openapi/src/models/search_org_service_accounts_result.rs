/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// SearchOrgServiceAccountsResult : swagger: model
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchOrgServiceAccountsResult {
    #[serde(rename = "page", skip_serializing_if = "Option::is_none")]
    pub page: Option<i64>,
    #[serde(rename = "perPage", skip_serializing_if = "Option::is_none")]
    pub per_page: Option<i64>,
    #[serde(rename = "serviceAccounts", skip_serializing_if = "Option::is_none")]
    pub service_accounts: Option<Vec<models::ServiceAccountDto>>,
    /// It can be used for pagination of the user list E.g. if totalCount is equal to 100 users and the perpage parameter is set to 10 then there are 10 pages of users.
    #[serde(rename = "totalCount", skip_serializing_if = "Option::is_none")]
    pub total_count: Option<i64>,
}

impl SearchOrgServiceAccountsResult {
    /// swagger: model
    pub fn new() -> SearchOrgServiceAccountsResult {
        SearchOrgServiceAccountsResult {
            page: None,
            per_page: None,
            service_accounts: None,
            total_count: None,
        }
    }
}

