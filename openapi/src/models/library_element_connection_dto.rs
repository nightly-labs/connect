/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LibraryElementConnectionDto {
    #[serde(rename = "connectionId", skip_serializing_if = "Option::is_none")]
    pub connection_id: Option<i64>,
    #[serde(rename = "connectionUid", skip_serializing_if = "Option::is_none")]
    pub connection_uid: Option<String>,
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<Box<models::LibraryElementDtoMetaUser>>,
    #[serde(rename = "elementId", skip_serializing_if = "Option::is_none")]
    pub element_id: Option<i64>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<i64>,
}

impl LibraryElementConnectionDto {
    pub fn new() -> LibraryElementConnectionDto {
        LibraryElementConnectionDto {
            connection_id: None,
            connection_uid: None,
            created: None,
            created_by: None,
            element_id: None,
            id: None,
            kind: None,
        }
    }
}

