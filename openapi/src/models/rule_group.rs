/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RuleGroup {
    #[serde(rename = "evaluationTime", skip_serializing_if = "Option::is_none")]
    pub evaluation_time: Option<f64>,
    #[serde(rename = "file")]
    pub file: String,
    #[serde(rename = "interval")]
    pub interval: f64,
    #[serde(rename = "lastEvaluation", skip_serializing_if = "Option::is_none")]
    pub last_evaluation: Option<String>,
    #[serde(rename = "name")]
    pub name: String,
    /// In order to preserve rule ordering, while exposing type (alerting or recording) specific properties, both alerting and recording rules are exposed in the same array.
    #[serde(rename = "rules")]
    pub rules: Vec<models::AlertingRule>,
    #[serde(rename = "totals", skip_serializing_if = "Option::is_none")]
    pub totals: Option<std::collections::HashMap<String, i64>>,
}

impl RuleGroup {
    pub fn new(file: String, interval: f64, name: String, rules: Vec<models::AlertingRule>) -> RuleGroup {
        RuleGroup {
            evaluation_time: None,
            file,
            interval,
            last_evaluation: None,
            name,
            rules,
            totals: None,
        }
    }
}

