/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// Sample : Sample is a single sample belonging to a metric. It represents either a float sample or a histogram sample. If H is nil, it is a float sample. Otherwise, it is a histogram sample.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Sample {
    #[serde(rename = "F", skip_serializing_if = "Option::is_none")]
    pub f: Option<f64>,
    #[serde(rename = "H", skip_serializing_if = "Option::is_none")]
    pub h: Option<Box<models::FloatHistogram>>,
    /// Labels is a sorted set of labels. Order has to be guaranteed upon instantiation.
    #[serde(rename = "Metric", skip_serializing_if = "Option::is_none")]
    pub metric: Option<Vec<models::Label>>,
    #[serde(rename = "T", skip_serializing_if = "Option::is_none")]
    pub t: Option<i64>,
}

impl Sample {
    /// Sample is a single sample belonging to a metric. It represents either a float sample or a histogram sample. If H is nil, it is a float sample. Otherwise, it is a histogram sample.
    pub fn new() -> Sample {
        Sample {
            f: None,
            h: None,
            metric: None,
            t: None,
        }
    }
}

