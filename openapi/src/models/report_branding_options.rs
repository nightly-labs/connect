/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReportBrandingOptions {
    #[serde(rename = "emailFooterLink", skip_serializing_if = "Option::is_none")]
    pub email_footer_link: Option<String>,
    #[serde(rename = "emailFooterMode", skip_serializing_if = "Option::is_none")]
    pub email_footer_mode: Option<String>,
    #[serde(rename = "emailFooterText", skip_serializing_if = "Option::is_none")]
    pub email_footer_text: Option<String>,
    #[serde(rename = "emailLogoUrl", skip_serializing_if = "Option::is_none")]
    pub email_logo_url: Option<String>,
    #[serde(rename = "reportLogoUrl", skip_serializing_if = "Option::is_none")]
    pub report_logo_url: Option<String>,
}

impl ReportBrandingOptions {
    pub fn new() -> ReportBrandingOptions {
        ReportBrandingOptions {
            email_footer_link: None,
            email_footer_mode: None,
            email_footer_text: None,
            email_logo_url: None,
            report_logo_url: None,
        }
    }
}

