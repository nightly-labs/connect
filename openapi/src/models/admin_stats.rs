/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdminStats {
    #[serde(rename = "activeAdmins", skip_serializing_if = "Option::is_none")]
    pub active_admins: Option<i64>,
    #[serde(rename = "activeDevices", skip_serializing_if = "Option::is_none")]
    pub active_devices: Option<i64>,
    #[serde(rename = "activeEditors", skip_serializing_if = "Option::is_none")]
    pub active_editors: Option<i64>,
    #[serde(rename = "activeSessions", skip_serializing_if = "Option::is_none")]
    pub active_sessions: Option<i64>,
    #[serde(rename = "activeUsers", skip_serializing_if = "Option::is_none")]
    pub active_users: Option<i64>,
    #[serde(rename = "activeViewers", skip_serializing_if = "Option::is_none")]
    pub active_viewers: Option<i64>,
    #[serde(rename = "admins", skip_serializing_if = "Option::is_none")]
    pub admins: Option<i64>,
    #[serde(rename = "alerts", skip_serializing_if = "Option::is_none")]
    pub alerts: Option<i64>,
    #[serde(rename = "dailyActiveAdmins", skip_serializing_if = "Option::is_none")]
    pub daily_active_admins: Option<i64>,
    #[serde(rename = "dailyActiveEditors", skip_serializing_if = "Option::is_none")]
    pub daily_active_editors: Option<i64>,
    #[serde(rename = "dailyActiveSessions", skip_serializing_if = "Option::is_none")]
    pub daily_active_sessions: Option<i64>,
    #[serde(rename = "dailyActiveUsers", skip_serializing_if = "Option::is_none")]
    pub daily_active_users: Option<i64>,
    #[serde(rename = "dailyActiveViewers", skip_serializing_if = "Option::is_none")]
    pub daily_active_viewers: Option<i64>,
    #[serde(rename = "dashboards", skip_serializing_if = "Option::is_none")]
    pub dashboards: Option<i64>,
    #[serde(rename = "datasources", skip_serializing_if = "Option::is_none")]
    pub datasources: Option<i64>,
    #[serde(rename = "editors", skip_serializing_if = "Option::is_none")]
    pub editors: Option<i64>,
    #[serde(rename = "monthlyActiveUsers", skip_serializing_if = "Option::is_none")]
    pub monthly_active_users: Option<i64>,
    #[serde(rename = "orgs", skip_serializing_if = "Option::is_none")]
    pub orgs: Option<i64>,
    #[serde(rename = "playlists", skip_serializing_if = "Option::is_none")]
    pub playlists: Option<i64>,
    #[serde(rename = "snapshots", skip_serializing_if = "Option::is_none")]
    pub snapshots: Option<i64>,
    #[serde(rename = "stars", skip_serializing_if = "Option::is_none")]
    pub stars: Option<i64>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<i64>,
    #[serde(rename = "users", skip_serializing_if = "Option::is_none")]
    pub users: Option<i64>,
    #[serde(rename = "viewers", skip_serializing_if = "Option::is_none")]
    pub viewers: Option<i64>,
}

impl AdminStats {
    pub fn new() -> AdminStats {
        AdminStats {
            active_admins: None,
            active_devices: None,
            active_editors: None,
            active_sessions: None,
            active_users: None,
            active_viewers: None,
            admins: None,
            alerts: None,
            daily_active_admins: None,
            daily_active_editors: None,
            daily_active_sessions: None,
            daily_active_users: None,
            daily_active_viewers: None,
            dashboards: None,
            datasources: None,
            editors: None,
            monthly_active_users: None,
            orgs: None,
            playlists: None,
            snapshots: None,
            stars: None,
            tags: None,
            users: None,
            viewers: None,
        }
    }
}

