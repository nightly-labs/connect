/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateDashboardSnapshot200Response {
    /// Unique key used to delete the snapshot. It is different from the key so that only the creator can delete the snapshot.
    #[serde(rename = "deleteKey", skip_serializing_if = "Option::is_none")]
    pub delete_key: Option<String>,
    #[serde(rename = "deleteUrl", skip_serializing_if = "Option::is_none")]
    pub delete_url: Option<String>,
    /// Snapshot id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    /// Unique key
    #[serde(rename = "key", skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

impl CreateDashboardSnapshot200Response {
    pub fn new() -> CreateDashboardSnapshot200Response {
        CreateDashboardSnapshot200Response {
            delete_key: None,
            delete_url: None,
            id: None,
            key: None,
            url: None,
        }
    }
}

