/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// GettableAlert : GettableAlert gettable alert
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GettableAlert {
    /// LabelSet label set
    #[serde(rename = "annotations")]
    pub annotations: std::collections::HashMap<String, String>,
    /// ends at
    #[serde(rename = "endsAt")]
    pub ends_at: String,
    /// fingerprint
    #[serde(rename = "fingerprint")]
    pub fingerprint: String,
    /// generator URL Format: uri
    #[serde(rename = "generatorURL", skip_serializing_if = "Option::is_none")]
    pub generator_url: Option<String>,
    /// LabelSet label set
    #[serde(rename = "labels")]
    pub labels: std::collections::HashMap<String, String>,
    /// receivers
    #[serde(rename = "receivers")]
    pub receivers: Vec<models::Receiver>,
    /// starts at
    #[serde(rename = "startsAt")]
    pub starts_at: String,
    #[serde(rename = "status")]
    pub status: Box<models::AlertStatus>,
    /// updated at
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
}

impl GettableAlert {
    /// GettableAlert gettable alert
    pub fn new(annotations: std::collections::HashMap<String, String>, ends_at: String, fingerprint: String, labels: std::collections::HashMap<String, String>, receivers: Vec<models::Receiver>, starts_at: String, status: models::AlertStatus, updated_at: String) -> GettableAlert {
        GettableAlert {
            annotations,
            ends_at,
            fingerprint,
            generator_url: None,
            labels,
            receivers,
            starts_at,
            status: Box::new(status),
            updated_at,
        }
    }
}

