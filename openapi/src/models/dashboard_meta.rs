/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DashboardMeta {
    #[serde(rename = "annotationsPermissions", skip_serializing_if = "Option::is_none")]
    pub annotations_permissions: Option<Box<models::AnnotationPermission>>,
    #[serde(rename = "canAdmin", skip_serializing_if = "Option::is_none")]
    pub can_admin: Option<bool>,
    #[serde(rename = "canDelete", skip_serializing_if = "Option::is_none")]
    pub can_delete: Option<bool>,
    #[serde(rename = "canEdit", skip_serializing_if = "Option::is_none")]
    pub can_edit: Option<bool>,
    #[serde(rename = "canSave", skip_serializing_if = "Option::is_none")]
    pub can_save: Option<bool>,
    #[serde(rename = "canStar", skip_serializing_if = "Option::is_none")]
    pub can_star: Option<bool>,
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    #[serde(rename = "expires", skip_serializing_if = "Option::is_none")]
    pub expires: Option<String>,
    /// Deprecated: use FolderUID instead
    #[serde(rename = "folderId", skip_serializing_if = "Option::is_none")]
    pub folder_id: Option<i64>,
    #[serde(rename = "folderTitle", skip_serializing_if = "Option::is_none")]
    pub folder_title: Option<String>,
    #[serde(rename = "folderUid", skip_serializing_if = "Option::is_none")]
    pub folder_uid: Option<String>,
    #[serde(rename = "folderUrl", skip_serializing_if = "Option::is_none")]
    pub folder_url: Option<String>,
    #[serde(rename = "hasAcl", skip_serializing_if = "Option::is_none")]
    pub has_acl: Option<bool>,
    #[serde(rename = "isFolder", skip_serializing_if = "Option::is_none")]
    pub is_folder: Option<bool>,
    #[serde(rename = "isSnapshot", skip_serializing_if = "Option::is_none")]
    pub is_snapshot: Option<bool>,
    #[serde(rename = "isStarred", skip_serializing_if = "Option::is_none")]
    pub is_starred: Option<bool>,
    #[serde(rename = "provisioned", skip_serializing_if = "Option::is_none")]
    pub provisioned: Option<bool>,
    #[serde(rename = "provisionedExternalId", skip_serializing_if = "Option::is_none")]
    pub provisioned_external_id: Option<String>,
    #[serde(rename = "publicDashboardEnabled", skip_serializing_if = "Option::is_none")]
    pub public_dashboard_enabled: Option<bool>,
    #[serde(rename = "publicDashboardUid", skip_serializing_if = "Option::is_none")]
    pub public_dashboard_uid: Option<String>,
    #[serde(rename = "slug", skip_serializing_if = "Option::is_none")]
    pub slug: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "updated", skip_serializing_if = "Option::is_none")]
    pub updated: Option<String>,
    #[serde(rename = "updatedBy", skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<String>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i64>,
}

impl DashboardMeta {
    pub fn new() -> DashboardMeta {
        DashboardMeta {
            annotations_permissions: None,
            can_admin: None,
            can_delete: None,
            can_edit: None,
            can_save: None,
            can_star: None,
            created: None,
            created_by: None,
            expires: None,
            folder_id: None,
            folder_title: None,
            folder_uid: None,
            folder_url: None,
            has_acl: None,
            is_folder: None,
            is_snapshot: None,
            is_starred: None,
            provisioned: None,
            provisioned_external_id: None,
            public_dashboard_enabled: None,
            public_dashboard_uid: None,
            slug: None,
            r#type: None,
            updated: None,
            updated_by: None,
            url: None,
            version: None,
        }
    }
}

