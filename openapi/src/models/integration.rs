/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// Integration : Integration integration
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Integration {
    /// A timestamp indicating the last attempt to deliver a notification regardless of the outcome. Format: date-time
    #[serde(rename = "lastNotifyAttempt", skip_serializing_if = "Option::is_none")]
    pub last_notify_attempt: Option<String>,
    /// Duration of the last attempt to deliver a notification in humanized format (`1s` or `15ms`, etc).
    #[serde(rename = "lastNotifyAttemptDuration", skip_serializing_if = "Option::is_none")]
    pub last_notify_attempt_duration: Option<String>,
    /// Error string for the last attempt to deliver a notification. Empty if the last attempt was successful.
    #[serde(rename = "lastNotifyAttemptError", skip_serializing_if = "Option::is_none")]
    pub last_notify_attempt_error: Option<String>,
    /// name
    #[serde(rename = "name")]
    pub name: String,
    /// send resolved
    #[serde(rename = "sendResolved")]
    pub send_resolved: bool,
}

impl Integration {
    /// Integration integration
    pub fn new(name: String, send_resolved: bool) -> Integration {
        Integration {
            last_notify_attempt: None,
            last_notify_attempt_duration: None,
            last_notify_attempt_error: None,
            name,
            send_resolved,
        }
    }
}

