/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GettableGrafanaRule {
    #[serde(rename = "condition", skip_serializing_if = "Option::is_none")]
    pub condition: Option<String>,
    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
    pub data: Option<Vec<models::AlertQuery>>,
    #[serde(rename = "exec_err_state", skip_serializing_if = "Option::is_none")]
    pub exec_err_state: Option<ExecErrState>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(rename = "intervalSeconds", skip_serializing_if = "Option::is_none")]
    pub interval_seconds: Option<i64>,
    #[serde(rename = "is_paused", skip_serializing_if = "Option::is_none")]
    pub is_paused: Option<bool>,
    #[serde(rename = "namespace_uid", skip_serializing_if = "Option::is_none")]
    pub namespace_uid: Option<String>,
    #[serde(rename = "no_data_state", skip_serializing_if = "Option::is_none")]
    pub no_data_state: Option<NoDataState>,
    #[serde(rename = "notification_settings", skip_serializing_if = "Option::is_none")]
    pub notification_settings: Option<Box<models::AlertRuleNotificationSettings>>,
    #[serde(rename = "orgId", skip_serializing_if = "Option::is_none")]
    pub org_id: Option<i64>,
    #[serde(rename = "provenance", skip_serializing_if = "Option::is_none")]
    pub provenance: Option<String>,
    #[serde(rename = "rule_group", skip_serializing_if = "Option::is_none")]
    pub rule_group: Option<String>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "uid", skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
    #[serde(rename = "updated", skip_serializing_if = "Option::is_none")]
    pub updated: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i64>,
}

impl GettableGrafanaRule {
    pub fn new() -> GettableGrafanaRule {
        GettableGrafanaRule {
            condition: None,
            data: None,
            exec_err_state: None,
            id: None,
            interval_seconds: None,
            is_paused: None,
            namespace_uid: None,
            no_data_state: None,
            notification_settings: None,
            org_id: None,
            provenance: None,
            rule_group: None,
            title: None,
            uid: None,
            updated: None,
            version: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ExecErrState {
    #[serde(rename = "OK")]
    Ok,
    #[serde(rename = "Alerting")]
    Alerting,
    #[serde(rename = "Error")]
    Error,
}

impl Default for ExecErrState {
    fn default() -> ExecErrState {
        Self::Ok
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NoDataState {
    #[serde(rename = "Alerting")]
    Alerting,
    #[serde(rename = "NoData")]
    NoData,
    #[serde(rename = "OK")]
    Ok,
}

impl Default for NoDataState {
    fn default() -> NoDataState {
        Self::Alerting
    }
}

