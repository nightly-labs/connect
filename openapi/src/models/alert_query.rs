/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlertQuery {
    /// Grafana data source unique identifier; it should be '__expr__' for a Server Side Expression operation.
    #[serde(rename = "datasourceUid", skip_serializing_if = "Option::is_none")]
    pub datasource_uid: Option<String>,
    /// JSON is the raw JSON query and includes the above properties as well as custom properties.
    #[serde(rename = "model", skip_serializing_if = "Option::is_none")]
    pub model: Option<serde_json::Value>,
    /// QueryType is an optional identifier for the type of query. It can be used to distinguish different types of queries.
    #[serde(rename = "queryType", skip_serializing_if = "Option::is_none")]
    pub query_type: Option<String>,
    /// RefID is the unique identifier of the query, set by the frontend call.
    #[serde(rename = "refId", skip_serializing_if = "Option::is_none")]
    pub ref_id: Option<String>,
    #[serde(rename = "relativeTimeRange", skip_serializing_if = "Option::is_none")]
    pub relative_time_range: Option<Box<models::RelativeTimeRange>>,
}

impl AlertQuery {
    pub fn new() -> AlertQuery {
        AlertQuery {
            datasource_uid: None,
            model: None,
            query_type: None,
            ref_id: None,
            relative_time_range: None,
        }
    }
}

