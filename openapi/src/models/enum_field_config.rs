/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// EnumFieldConfig : Enum field config Vector values are used as lookup keys into the enum fields
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnumFieldConfig {
    /// Color is the color value for a given index (empty is undefined)
    #[serde(rename = "color", skip_serializing_if = "Option::is_none")]
    pub color: Option<Vec<String>>,
    /// Description of the enum state
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<Vec<String>>,
    /// Icon supports setting an icon for a given index value
    #[serde(rename = "icon", skip_serializing_if = "Option::is_none")]
    pub icon: Option<Vec<String>>,
    /// Value is the string display value for a given index
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<Vec<String>>,
}

impl EnumFieldConfig {
    /// Enum field config Vector values are used as lookup keys into the enum fields
    pub fn new() -> EnumFieldConfig {
        EnumFieldConfig {
            color: None,
            description: None,
            icon: None,
            text: None,
        }
    }
}

