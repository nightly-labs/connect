/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// UpdateFolderCommand : UpdateFolderCommand captures the information required by the folder service to update a folder. Use Move to update a folder's parent folder.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateFolderCommand {
    /// NewDescription it's an optional parameter used for overriding the existing folder description
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Overwrite only used by the legacy folder implementation
    #[serde(rename = "overwrite", skip_serializing_if = "Option::is_none")]
    pub overwrite: Option<bool>,
    /// NewTitle it's an optional parameter used for overriding the existing folder title
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// Version only used by the legacy folder implementation
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i64>,
}

impl UpdateFolderCommand {
    /// UpdateFolderCommand captures the information required by the folder service to update a folder. Use Move to update a folder's parent folder.
    pub fn new() -> UpdateFolderCommand {
        UpdateFolderCommand {
            description: None,
            overwrite: None,
            title: None,
            version: None,
        }
    }
}

