/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// SigV4Config : SigV4Config is the configuration for signing remote write requests with AWS's SigV4 verification process. Empty values will be retrieved using the AWS default credentials chain.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SigV4Config {
    #[serde(rename = "AccessKey", skip_serializing_if = "Option::is_none")]
    pub access_key: Option<String>,
    #[serde(rename = "Profile", skip_serializing_if = "Option::is_none")]
    pub profile: Option<String>,
    #[serde(rename = "Region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(rename = "RoleARN", skip_serializing_if = "Option::is_none")]
    pub role_arn: Option<String>,
    #[serde(rename = "SecretKey", skip_serializing_if = "Option::is_none")]
    pub secret_key: Option<String>,
}

impl SigV4Config {
    /// SigV4Config is the configuration for signing remote write requests with AWS's SigV4 verification process. Empty values will be retrieved using the AWS default credentials chain.
    pub fn new() -> SigV4Config {
        SigV4Config {
            access_key: None,
            profile: None,
            region: None,
            role_arn: None,
            secret_key: None,
        }
    }
}

