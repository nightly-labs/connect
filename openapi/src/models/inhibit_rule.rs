/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// InhibitRule : InhibitRule defines an inhibition rule that mutes alerts that match the target labels if an alert matching the source labels exists. Both alerts have to have a set of labels being equal.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InhibitRule {
    #[serde(rename = "equal", skip_serializing_if = "Option::is_none")]
    pub equal: Option<Vec<String>>,
    /// SourceMatch defines a set of labels that have to equal the given value for source alerts. Deprecated. Remove before v1.0 release.
    #[serde(rename = "source_match", skip_serializing_if = "Option::is_none")]
    pub source_match: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "source_match_re", skip_serializing_if = "Option::is_none")]
    pub source_match_re: Option<std::collections::HashMap<String, String>>,
    /// Matchers is a slice of Matchers that is sortable, implements Stringer, and provides a Matches method to match a LabelSet against all Matchers in the slice. Note that some users of Matchers might require it to be sorted.
    #[serde(rename = "source_matchers", skip_serializing_if = "Option::is_none")]
    pub source_matchers: Option<Vec<models::Matcher>>,
    /// TargetMatch defines a set of labels that have to equal the given value for target alerts. Deprecated. Remove before v1.0 release.
    #[serde(rename = "target_match", skip_serializing_if = "Option::is_none")]
    pub target_match: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "target_match_re", skip_serializing_if = "Option::is_none")]
    pub target_match_re: Option<std::collections::HashMap<String, String>>,
    /// Matchers is a slice of Matchers that is sortable, implements Stringer, and provides a Matches method to match a LabelSet against all Matchers in the slice. Note that some users of Matchers might require it to be sorted.
    #[serde(rename = "target_matchers", skip_serializing_if = "Option::is_none")]
    pub target_matchers: Option<Vec<models::Matcher>>,
}

impl InhibitRule {
    /// InhibitRule defines an inhibition rule that mutes alerts that match the target labels if an alert matching the source labels exists. Both alerts have to have a set of labels being equal.
    pub fn new() -> InhibitRule {
        InhibitRule {
            equal: None,
            source_match: None,
            source_match_re: None,
            source_matchers: None,
            target_match: None,
            target_match_re: None,
            target_matchers: None,
        }
    }
}

