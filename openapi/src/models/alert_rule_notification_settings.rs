/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlertRuleNotificationSettings {
    /// Override the labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping. Must include 'alertname' and 'grafana_folder' if not using '...'.
    #[serde(rename = "group_by", skip_serializing_if = "Option::is_none")]
    pub group_by: Option<Vec<String>>,
    /// Override how long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)
    #[serde(rename = "group_interval", skip_serializing_if = "Option::is_none")]
    pub group_interval: Option<String>,
    /// Override how long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)
    #[serde(rename = "group_wait", skip_serializing_if = "Option::is_none")]
    pub group_wait: Option<String>,
    /// Override the times when notifications should be muted. These must match the name of a mute time interval defined in the alertmanager configuration mute_time_intervals section. When muted it will not send any notifications, but otherwise acts normally.
    #[serde(rename = "mute_time_intervals", skip_serializing_if = "Option::is_none")]
    pub mute_time_intervals: Option<Vec<String>>,
    /// Name of the receiver to send notifications to.
    #[serde(rename = "receiver")]
    pub receiver: String,
    /// Override how long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more). Note that this parameter is implicitly bound by Alertmanager's `--data.retention` configuration flag. Notifications will be resent after either repeat_interval or the data retention period have passed, whichever occurs first. `repeat_interval` should not be less than `group_interval`.
    #[serde(rename = "repeat_interval", skip_serializing_if = "Option::is_none")]
    pub repeat_interval: Option<String>,
}

impl AlertRuleNotificationSettings {
    pub fn new(receiver: String) -> AlertRuleNotificationSettings {
        AlertRuleNotificationSettings {
            group_by: None,
            group_interval: None,
            group_wait: None,
            mute_time_intervals: None,
            receiver,
            repeat_interval: None,
        }
    }
}

