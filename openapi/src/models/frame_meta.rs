/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// FrameMeta : https://github.com/grafana/grafana/blob/master/packages/grafana-data/src/types/data.ts#L11 NOTE -- in javascript this can accept any `[key: string]: any;` however this interface only exposes the values we want to be exposed
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FrameMeta {
    /// Channel is the path to a stream in grafana live that has real-time updates for this data.
    #[serde(rename = "channel", skip_serializing_if = "Option::is_none")]
    pub channel: Option<String>,
    /// Custom datasource specific values.
    #[serde(rename = "custom", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub custom: Option<Option<serde_json::Value>>,
    /// nolint:revive
    #[serde(rename = "dataTopic", skip_serializing_if = "Option::is_none")]
    pub data_topic: Option<String>,
    /// ExecutedQueryString is the raw query sent to the underlying system. All macros and templating have been applied.  When metadata contains this value, it will be shown in the query inspector.
    #[serde(rename = "executedQueryString", skip_serializing_if = "Option::is_none")]
    pub executed_query_string: Option<String>,
    /// Notices provide additional information about the data in the Frame that Grafana can display to the user in the user interface.
    #[serde(rename = "notices", skip_serializing_if = "Option::is_none")]
    pub notices: Option<Vec<models::Notice>>,
    /// Path is a browsable path on the datasource.
    #[serde(rename = "path", skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// PathSeparator defines the separator pattern to decode a hierarchy. The default separator is '/'.
    #[serde(rename = "pathSeparator", skip_serializing_if = "Option::is_none")]
    pub path_separator: Option<String>,
    /// PreferredVisualizationPluginId sets the panel plugin id to use to render the data when using Explore. If the plugin cannot be found will fall back to PreferredVisualization.
    #[serde(rename = "preferredVisualisationPluginId", skip_serializing_if = "Option::is_none")]
    pub preferred_visualisation_plugin_id: Option<String>,
    #[serde(rename = "preferredVisualisationType", skip_serializing_if = "Option::is_none")]
    pub preferred_visualisation_type: Option<String>,
    /// Stats is an array of query result statistics.
    #[serde(rename = "stats", skip_serializing_if = "Option::is_none")]
    pub stats: Option<Vec<models::QueryStat>>,
    /// A FrameType string, when present in a frame's metadata, asserts that the frame's structure conforms to the FrameType's specification. This property is currently optional, so FrameType may be FrameTypeUnknown even if the properties of the Frame correspond to a defined FrameType. +enum
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "typeVersion", skip_serializing_if = "Option::is_none")]
    pub type_version: Option<Vec<i32>>,
    /// Array of field indices which values create a unique id for each row. Ideally this should be globally unique ID but that isn't guarantied. Should help with keeping track and deduplicating rows in visualizations, especially with streaming data with frequent updates.
    #[serde(rename = "uniqueRowIdFields", skip_serializing_if = "Option::is_none")]
    pub unique_row_id_fields: Option<Vec<i64>>,
}

impl FrameMeta {
    /// https://github.com/grafana/grafana/blob/master/packages/grafana-data/src/types/data.ts#L11 NOTE -- in javascript this can accept any `[key: string]: any;` however this interface only exposes the values we want to be exposed
    pub fn new() -> FrameMeta {
        FrameMeta {
            channel: None,
            custom: None,
            data_topic: None,
            executed_query_string: None,
            notices: None,
            path: None,
            path_separator: None,
            preferred_visualisation_plugin_id: None,
            preferred_visualisation_type: None,
            stats: None,
            r#type: None,
            type_version: None,
            unique_row_id_fields: None,
        }
    }
}

