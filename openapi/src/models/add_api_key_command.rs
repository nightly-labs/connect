/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddApiKeyCommand {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "role", skip_serializing_if = "Option::is_none")]
    pub role: Option<Role>,
    #[serde(rename = "secondsToLive", skip_serializing_if = "Option::is_none")]
    pub seconds_to_live: Option<i64>,
}

impl AddApiKeyCommand {
    pub fn new() -> AddApiKeyCommand {
        AddApiKeyCommand {
            name: None,
            role: None,
            seconds_to_live: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "None")]
    None,
    #[serde(rename = "Viewer")]
    Viewer,
    #[serde(rename = "Editor")]
    Editor,
    #[serde(rename = "Admin")]
    Admin,
}

impl Default for Role {
    fn default() -> Role {
        Self::None
    }
}

