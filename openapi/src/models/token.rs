/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Token {
    #[serde(rename = "account", skip_serializing_if = "Option::is_none")]
    pub account: Option<String>,
    #[serde(rename = "anonymousRatio", skip_serializing_if = "Option::is_none")]
    pub anonymous_ratio: Option<i64>,
    #[serde(rename = "company", skip_serializing_if = "Option::is_none")]
    pub company: Option<String>,
    #[serde(rename = "details_url", skip_serializing_if = "Option::is_none")]
    pub details_url: Option<String>,
    #[serde(rename = "exp", skip_serializing_if = "Option::is_none")]
    pub exp: Option<i64>,
    #[serde(rename = "iat", skip_serializing_if = "Option::is_none")]
    pub iat: Option<i64>,
    #[serde(rename = "included_users", skip_serializing_if = "Option::is_none")]
    pub included_users: Option<i64>,
    #[serde(rename = "iss", skip_serializing_if = "Option::is_none")]
    pub iss: Option<String>,
    #[serde(rename = "jti", skip_serializing_if = "Option::is_none")]
    pub jti: Option<String>,
    #[serde(rename = "lexp", skip_serializing_if = "Option::is_none")]
    pub lexp: Option<i64>,
    #[serde(rename = "lic_exp_warn_days", skip_serializing_if = "Option::is_none")]
    pub lic_exp_warn_days: Option<i64>,
    #[serde(rename = "lid", skip_serializing_if = "Option::is_none")]
    pub lid: Option<String>,
    #[serde(rename = "limit_by", skip_serializing_if = "Option::is_none")]
    pub limit_by: Option<String>,
    #[serde(rename = "max_concurrent_user_sessions", skip_serializing_if = "Option::is_none")]
    pub max_concurrent_user_sessions: Option<i64>,
    #[serde(rename = "nbf", skip_serializing_if = "Option::is_none")]
    pub nbf: Option<i64>,
    #[serde(rename = "prod", skip_serializing_if = "Option::is_none")]
    pub prod: Option<Vec<String>>,
    #[serde(rename = "slug", skip_serializing_if = "Option::is_none")]
    pub slug: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<i64>,
    #[serde(rename = "sub", skip_serializing_if = "Option::is_none")]
    pub sub: Option<String>,
    #[serde(rename = "tok_exp_warn_days", skip_serializing_if = "Option::is_none")]
    pub tok_exp_warn_days: Option<i64>,
    #[serde(rename = "trial", skip_serializing_if = "Option::is_none")]
    pub trial: Option<bool>,
    #[serde(rename = "trial_exp", skip_serializing_if = "Option::is_none")]
    pub trial_exp: Option<i64>,
    #[serde(rename = "update_days", skip_serializing_if = "Option::is_none")]
    pub update_days: Option<i64>,
    #[serde(rename = "usage_billing", skip_serializing_if = "Option::is_none")]
    pub usage_billing: Option<bool>,
}

impl Token {
    pub fn new() -> Token {
        Token {
            account: None,
            anonymous_ratio: None,
            company: None,
            details_url: None,
            exp: None,
            iat: None,
            included_users: None,
            iss: None,
            jti: None,
            lexp: None,
            lic_exp_warn_days: None,
            lid: None,
            limit_by: None,
            max_concurrent_user_sessions: None,
            nbf: None,
            prod: None,
            slug: None,
            status: None,
            sub: None,
            tok_exp_warn_days: None,
            trial: None,
            trial_exp: None,
            update_days: None,
            usage_billing: None,
        }
    }
}

