/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// FailedUser : FailedUser holds the information of an user that failed
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FailedUser {
    #[serde(rename = "Error", skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    #[serde(rename = "Login", skip_serializing_if = "Option::is_none")]
    pub login: Option<String>,
}

impl FailedUser {
    /// FailedUser holds the information of an user that failed
    pub fn new() -> FailedUser {
        FailedUser {
            error: None,
            login: None,
        }
    }
}

