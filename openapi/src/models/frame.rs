/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// Frame : Each Field is well typed by its FieldType and supports optional Labels.  A Frame is a general data container for Grafana. A Frame can be table data or time series data depending on its content and field types.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Frame {
    /// Fields are the columns of a frame. All Fields must be of the same the length when marshalling the Frame for transmission. There should be no `nil` entries in the Fields slice (making them pointers was a mistake).
    #[serde(rename = "Fields", skip_serializing_if = "Option::is_none")]
    pub fields: Option<Vec<models::Field>>,
    #[serde(rename = "Meta", skip_serializing_if = "Option::is_none")]
    pub meta: Option<Box<models::FrameMeta>>,
    /// Name is used in some Grafana visualizations.
    #[serde(rename = "Name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// RefID is a property that can be set to match a Frame to its originating query.
    #[serde(rename = "RefID", skip_serializing_if = "Option::is_none")]
    pub ref_id: Option<String>,
}

impl Frame {
    /// Each Field is well typed by its FieldType and supports optional Labels.  A Frame is a general data container for Grafana. A Frame can be table data or time series data depending on its content and field types.
    pub fn new() -> Frame {
        Frame {
            fields: None,
            meta: None,
            name: None,
            ref_id: None,
        }
    }
}

