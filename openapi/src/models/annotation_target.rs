/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// AnnotationTarget : TODO: this should be a regular DataQuery that depends on the selected dashboard these match the properties of the \"grafana\" datasouce that is default in most dashboards
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AnnotationTarget {
    /// Only required/valid for the grafana datasource... but code+tests is already depending on it so hard to change
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
    /// Only required/valid for the grafana datasource... but code+tests is already depending on it so hard to change
    #[serde(rename = "matchAny", skip_serializing_if = "Option::is_none")]
    pub match_any: Option<bool>,
    /// Only required/valid for the grafana datasource... but code+tests is already depending on it so hard to change
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// Only required/valid for the grafana datasource... but code+tests is already depending on it so hard to change
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
}

impl AnnotationTarget {
    /// TODO: this should be a regular DataQuery that depends on the selected dashboard these match the properties of the \"grafana\" datasouce that is default in most dashboards
    pub fn new() -> AnnotationTarget {
        AnnotationTarget {
            limit: None,
            match_any: None,
            tags: None,
            r#type: None,
        }
    }
}

