/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// Url : The general form represented is:  [scheme:][//[userinfo@]host][/]path[?query][#fragment]  URLs that do not start with a slash after the scheme are interpreted as:  scheme:opaque[?query][#fragment]  The Host field contains the host and port subcomponents of the URL. When the port is present, it is separated from the host with a colon. When the host is an IPv6 address, it must be enclosed in square brackets: \"[fe80::1]:80\". The [net.JoinHostPort] function combines a host and port into a string suitable for the Host field, adding square brackets to the host when necessary.  Note that the Path field is stored in decoded form: /%47%6f%2f becomes /Go/. A consequence is that it is impossible to tell which slashes in the Path were slashes in the raw URL and which were %2f. This distinction is rarely important, but when it is, the code should use the [URL.EscapedPath] method, which preserves the original encoding of Path.  The RawPath field is an optional field which is only set when the default encoding of Path is different from the escaped path. See the EscapedPath method for more details.  URL's String method uses the EscapedPath method to obtain the path.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Url {
    #[serde(rename = "ForceQuery", skip_serializing_if = "Option::is_none")]
    pub force_query: Option<bool>,
    #[serde(rename = "Fragment", skip_serializing_if = "Option::is_none")]
    pub fragment: Option<String>,
    #[serde(rename = "Host", skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(rename = "OmitHost", skip_serializing_if = "Option::is_none")]
    pub omit_host: Option<bool>,
    #[serde(rename = "Opaque", skip_serializing_if = "Option::is_none")]
    pub opaque: Option<String>,
    #[serde(rename = "Path", skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(rename = "RawFragment", skip_serializing_if = "Option::is_none")]
    pub raw_fragment: Option<String>,
    #[serde(rename = "RawPath", skip_serializing_if = "Option::is_none")]
    pub raw_path: Option<String>,
    #[serde(rename = "RawQuery", skip_serializing_if = "Option::is_none")]
    pub raw_query: Option<String>,
    #[serde(rename = "Scheme", skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
    /// The Userinfo type is an immutable encapsulation of username and password details for a [URL]. An existing Userinfo value is guaranteed to have a username set (potentially empty, as allowed by RFC 2396), and optionally a password.
    #[serde(rename = "User", skip_serializing_if = "Option::is_none")]
    pub user: Option<serde_json::Value>,
}

impl Url {
    /// The general form represented is:  [scheme:][//[userinfo@]host][/]path[?query][#fragment]  URLs that do not start with a slash after the scheme are interpreted as:  scheme:opaque[?query][#fragment]  The Host field contains the host and port subcomponents of the URL. When the port is present, it is separated from the host with a colon. When the host is an IPv6 address, it must be enclosed in square brackets: \"[fe80::1]:80\". The [net.JoinHostPort] function combines a host and port into a string suitable for the Host field, adding square brackets to the host when necessary.  Note that the Path field is stored in decoded form: /%47%6f%2f becomes /Go/. A consequence is that it is impossible to tell which slashes in the Path were slashes in the raw URL and which were %2f. This distinction is rarely important, but when it is, the code should use the [URL.EscapedPath] method, which preserves the original encoding of Path.  The RawPath field is an optional field which is only set when the default encoding of Path is different from the escaped path. See the EscapedPath method for more details.  URL's String method uses the EscapedPath method to obtain the path.
    pub fn new() -> Url {
        Url {
            force_query: None,
            fragment: None,
            host: None,
            omit_host: None,
            opaque: None,
            path: None,
            raw_fragment: None,
            raw_path: None,
            raw_query: None,
            scheme: None,
            user: None,
        }
    }
}

