/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// ClusterStatus : ClusterStatus cluster status
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClusterStatus {
    /// name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// peers
    #[serde(rename = "peers", skip_serializing_if = "Option::is_none")]
    pub peers: Option<Vec<models::PeerStatus>>,
    /// status
    #[serde(rename = "status")]
    pub status: Status,
}

impl ClusterStatus {
    /// ClusterStatus cluster status
    pub fn new(status: Status) -> ClusterStatus {
        ClusterStatus {
            name: None,
            peers: None,
            status,
        }
    }
}
/// status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "[ready settling disabled]")]
    LeftSquareBracketReadySettlingDisabledRightSquareBracket,
}

impl Default for Status {
    fn default() -> Status {
        Self::LeftSquareBracketReadySettlingDisabledRightSquareBracket
    }
}

