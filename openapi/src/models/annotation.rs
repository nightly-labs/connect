/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Annotation {
    #[serde(rename = "alertId", skip_serializing_if = "Option::is_none")]
    pub alert_id: Option<i64>,
    #[serde(rename = "alertName", skip_serializing_if = "Option::is_none")]
    pub alert_name: Option<String>,
    #[serde(rename = "avatarUrl", skip_serializing_if = "Option::is_none")]
    pub avatar_url: Option<String>,
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<i64>,
    #[serde(rename = "dashboardId", skip_serializing_if = "Option::is_none")]
    pub dashboard_id: Option<i64>,
    #[serde(rename = "dashboardUID", skip_serializing_if = "Option::is_none")]
    pub dashboard_uid: Option<String>,
    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
    pub data: Option<serde_json::Value>,
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(rename = "login", skip_serializing_if = "Option::is_none")]
    pub login: Option<String>,
    #[serde(rename = "newState", skip_serializing_if = "Option::is_none")]
    pub new_state: Option<String>,
    #[serde(rename = "panelId", skip_serializing_if = "Option::is_none")]
    pub panel_id: Option<i64>,
    #[serde(rename = "prevState", skip_serializing_if = "Option::is_none")]
    pub prev_state: Option<String>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<i64>,
    #[serde(rename = "timeEnd", skip_serializing_if = "Option::is_none")]
    pub time_end: Option<i64>,
    #[serde(rename = "updated", skip_serializing_if = "Option::is_none")]
    pub updated: Option<i64>,
    #[serde(rename = "userId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<i64>,
}

impl Annotation {
    pub fn new() -> Annotation {
        Annotation {
            alert_id: None,
            alert_name: None,
            avatar_url: None,
            created: None,
            dashboard_id: None,
            dashboard_uid: None,
            data: None,
            email: None,
            id: None,
            login: None,
            new_state: None,
            panel_id: None,
            prev_state: None,
            tags: None,
            text: None,
            time: None,
            time_end: None,
            updated: None,
            user_id: None,
        }
    }
}

