/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// Preferences : Spec defines user, team or org Grafana preferences
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Preferences {
    #[serde(rename = "cookiePreferences", skip_serializing_if = "Option::is_none")]
    pub cookie_preferences: Option<Box<models::CookiePreferences>>,
    /// UID for the home dashboard
    #[serde(rename = "homeDashboardUID", skip_serializing_if = "Option::is_none")]
    pub home_dashboard_uid: Option<String>,
    /// Selected language (beta)
    #[serde(rename = "language", skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,
    #[serde(rename = "queryHistory", skip_serializing_if = "Option::is_none")]
    pub query_history: Option<Box<models::QueryHistoryPreference>>,
    /// Theme light, dark, empty is default
    #[serde(rename = "theme", skip_serializing_if = "Option::is_none")]
    pub theme: Option<String>,
    /// The timezone selection TODO: this should use the timezone defined in common
    #[serde(rename = "timezone", skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    /// WeekStart day of the week (sunday, monday, etc)
    #[serde(rename = "weekStart", skip_serializing_if = "Option::is_none")]
    pub week_start: Option<String>,
}

impl Preferences {
    /// Spec defines user, team or org Grafana preferences
    pub fn new() -> Preferences {
        Preferences {
            cookie_preferences: None,
            home_dashboard_uid: None,
            language: None,
            query_history: None,
            theme: None,
            timezone: None,
            week_start: None,
        }
    }
}

