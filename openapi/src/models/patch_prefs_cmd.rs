/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PatchPrefsCmd {
    #[serde(rename = "cookies", skip_serializing_if = "Option::is_none")]
    pub cookies: Option<Vec<String>>,
    /// The numerical :id of a favorited dashboard
    #[serde(rename = "homeDashboardId", skip_serializing_if = "Option::is_none")]
    pub home_dashboard_id: Option<i64>,
    #[serde(rename = "homeDashboardUID", skip_serializing_if = "Option::is_none")]
    pub home_dashboard_uid: Option<String>,
    #[serde(rename = "language", skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,
    #[serde(rename = "queryHistory", skip_serializing_if = "Option::is_none")]
    pub query_history: Option<Box<models::QueryHistoryPreference>>,
    #[serde(rename = "theme", skip_serializing_if = "Option::is_none")]
    pub theme: Option<Theme>,
    #[serde(rename = "timezone", skip_serializing_if = "Option::is_none")]
    pub timezone: Option<Timezone>,
    #[serde(rename = "weekStart", skip_serializing_if = "Option::is_none")]
    pub week_start: Option<String>,
}

impl PatchPrefsCmd {
    pub fn new() -> PatchPrefsCmd {
        PatchPrefsCmd {
            cookies: None,
            home_dashboard_id: None,
            home_dashboard_uid: None,
            language: None,
            query_history: None,
            theme: None,
            timezone: None,
            week_start: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Theme {
    #[serde(rename = "light")]
    Light,
    #[serde(rename = "dark")]
    Dark,
}

impl Default for Theme {
    fn default() -> Theme {
        Self::Light
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Timezone {
    #[serde(rename = "utc")]
    Utc,
    #[serde(rename = "browser")]
    Browser,
}

impl Default for Timezone {
    fn default() -> Timezone {
        Self::Utc
    }
}

