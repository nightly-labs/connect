/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TelegramConfig {
    #[serde(rename = "api_url", skip_serializing_if = "Option::is_none")]
    pub api_url: Option<Box<models::Url>>,
    #[serde(rename = "chat", skip_serializing_if = "Option::is_none")]
    pub chat: Option<i64>,
    #[serde(rename = "disable_notifications", skip_serializing_if = "Option::is_none")]
    pub disable_notifications: Option<bool>,
    #[serde(rename = "http_config", skip_serializing_if = "Option::is_none")]
    pub http_config: Option<Box<models::HttpClientConfig>>,
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "parse_mode", skip_serializing_if = "Option::is_none")]
    pub parse_mode: Option<String>,
    #[serde(rename = "send_resolved", skip_serializing_if = "Option::is_none")]
    pub send_resolved: Option<bool>,
    #[serde(rename = "token", skip_serializing_if = "Option::is_none")]
    pub token: Option<String>,
    #[serde(rename = "token_file", skip_serializing_if = "Option::is_none")]
    pub token_file: Option<String>,
}

impl TelegramConfig {
    pub fn new() -> TelegramConfig {
        TelegramConfig {
            api_url: None,
            chat: None,
            disable_notifications: None,
            http_config: None,
            message: None,
            parse_mode: None,
            send_resolved: None,
            token: None,
            token_file: None,
        }
    }
}

