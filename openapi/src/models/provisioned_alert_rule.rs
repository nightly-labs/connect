/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProvisionedAlertRule {
    #[serde(rename = "annotations", skip_serializing_if = "Option::is_none")]
    pub annotations: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "condition")]
    pub condition: String,
    #[serde(rename = "data")]
    pub data: Vec<models::AlertQuery>,
    #[serde(rename = "execErrState")]
    pub exec_err_state: ExecErrState,
    #[serde(rename = "folderUID")]
    pub folder_uid: String,
    /// A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
    #[serde(rename = "for")]
    pub r#for: i64,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(rename = "isPaused", skip_serializing_if = "Option::is_none")]
    pub is_paused: Option<bool>,
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "noDataState")]
    pub no_data_state: NoDataState,
    #[serde(rename = "notification_settings", skip_serializing_if = "Option::is_none")]
    pub notification_settings: Option<Box<models::AlertRuleNotificationSettings>>,
    #[serde(rename = "orgID")]
    pub org_id: i64,
    #[serde(rename = "provenance", skip_serializing_if = "Option::is_none")]
    pub provenance: Option<String>,
    #[serde(rename = "ruleGroup")]
    pub rule_group: String,
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "uid", skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
    #[serde(rename = "updated", skip_serializing_if = "Option::is_none")]
    pub updated: Option<String>,
}

impl ProvisionedAlertRule {
    pub fn new(condition: String, data: Vec<models::AlertQuery>, exec_err_state: ExecErrState, folder_uid: String, r#for: i64, no_data_state: NoDataState, org_id: i64, rule_group: String, title: String) -> ProvisionedAlertRule {
        ProvisionedAlertRule {
            annotations: None,
            condition,
            data,
            exec_err_state,
            folder_uid,
            r#for,
            id: None,
            is_paused: None,
            labels: None,
            no_data_state,
            notification_settings: None,
            org_id,
            provenance: None,
            rule_group,
            title,
            uid: None,
            updated: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ExecErrState {
    #[serde(rename = "OK")]
    Ok,
    #[serde(rename = "Alerting")]
    Alerting,
    #[serde(rename = "Error")]
    Error,
}

impl Default for ExecErrState {
    fn default() -> ExecErrState {
        Self::Ok
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NoDataState {
    #[serde(rename = "Alerting")]
    Alerting,
    #[serde(rename = "NoData")]
    NoData,
    #[serde(rename = "OK")]
    Ok,
}

impl Default for NoDataState {
    fn default() -> NoDataState {
        Self::Alerting
    }
}

