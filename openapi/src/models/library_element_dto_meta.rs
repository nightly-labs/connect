/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LibraryElementDtoMeta {
    #[serde(rename = "connectedDashboards", skip_serializing_if = "Option::is_none")]
    pub connected_dashboards: Option<i64>,
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<Box<models::LibraryElementDtoMetaUser>>,
    #[serde(rename = "folderName", skip_serializing_if = "Option::is_none")]
    pub folder_name: Option<String>,
    #[serde(rename = "folderUid", skip_serializing_if = "Option::is_none")]
    pub folder_uid: Option<String>,
    #[serde(rename = "updated", skip_serializing_if = "Option::is_none")]
    pub updated: Option<String>,
    #[serde(rename = "updatedBy", skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<Box<models::LibraryElementDtoMetaUser>>,
}

impl LibraryElementDtoMeta {
    pub fn new() -> LibraryElementDtoMeta {
        LibraryElementDtoMeta {
            connected_dashboards: None,
            created: None,
            created_by: None,
            folder_name: None,
            folder_uid: None,
            updated: None,
            updated_by: None,
        }
    }
}

