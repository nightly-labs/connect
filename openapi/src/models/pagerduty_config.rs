/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PagerdutyConfig {
    #[serde(rename = "class", skip_serializing_if = "Option::is_none")]
    pub class: Option<String>,
    #[serde(rename = "client", skip_serializing_if = "Option::is_none")]
    pub client: Option<String>,
    #[serde(rename = "client_url", skip_serializing_if = "Option::is_none")]
    pub client_url: Option<String>,
    #[serde(rename = "component", skip_serializing_if = "Option::is_none")]
    pub component: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "details", skip_serializing_if = "Option::is_none")]
    pub details: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(rename = "http_config", skip_serializing_if = "Option::is_none")]
    pub http_config: Option<Box<models::HttpClientConfig>>,
    #[serde(rename = "images", skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<models::PagerdutyImage>>,
    #[serde(rename = "links", skip_serializing_if = "Option::is_none")]
    pub links: Option<Vec<models::PagerdutyLink>>,
    #[serde(rename = "routing_key", skip_serializing_if = "Option::is_none")]
    pub routing_key: Option<String>,
    #[serde(rename = "routing_key_file", skip_serializing_if = "Option::is_none")]
    pub routing_key_file: Option<String>,
    #[serde(rename = "send_resolved", skip_serializing_if = "Option::is_none")]
    pub send_resolved: Option<bool>,
    #[serde(rename = "service_key", skip_serializing_if = "Option::is_none")]
    pub service_key: Option<String>,
    #[serde(rename = "service_key_file", skip_serializing_if = "Option::is_none")]
    pub service_key_file: Option<String>,
    #[serde(rename = "severity", skip_serializing_if = "Option::is_none")]
    pub severity: Option<String>,
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<Box<models::Url>>,
}

impl PagerdutyConfig {
    pub fn new() -> PagerdutyConfig {
        PagerdutyConfig {
            class: None,
            client: None,
            client_url: None,
            component: None,
            description: None,
            details: None,
            group: None,
            http_config: None,
            images: None,
            links: None,
            routing_key: None,
            routing_key_file: None,
            send_resolved: None,
            service_key: None,
            service_key_file: None,
            severity: None,
            source: None,
            url: None,
        }
    }
}

