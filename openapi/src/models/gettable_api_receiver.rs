/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GettableApiReceiver {
    #[serde(rename = "discord_configs", skip_serializing_if = "Option::is_none")]
    pub discord_configs: Option<Vec<models::DiscordConfig>>,
    #[serde(rename = "email_configs", skip_serializing_if = "Option::is_none")]
    pub email_configs: Option<Vec<models::EmailConfig>>,
    #[serde(rename = "grafana_managed_receiver_configs", skip_serializing_if = "Option::is_none")]
    pub grafana_managed_receiver_configs: Option<Vec<models::GettableGrafanaReceiver>>,
    #[serde(rename = "msteams_configs", skip_serializing_if = "Option::is_none")]
    pub msteams_configs: Option<Vec<models::MsTeamsConfig>>,
    /// A unique identifier for this receiver.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "opsgenie_configs", skip_serializing_if = "Option::is_none")]
    pub opsgenie_configs: Option<Vec<models::OpsGenieConfig>>,
    #[serde(rename = "pagerduty_configs", skip_serializing_if = "Option::is_none")]
    pub pagerduty_configs: Option<Vec<models::PagerdutyConfig>>,
    #[serde(rename = "pushover_configs", skip_serializing_if = "Option::is_none")]
    pub pushover_configs: Option<Vec<models::PushoverConfig>>,
    #[serde(rename = "slack_configs", skip_serializing_if = "Option::is_none")]
    pub slack_configs: Option<Vec<models::SlackConfig>>,
    #[serde(rename = "sns_configs", skip_serializing_if = "Option::is_none")]
    pub sns_configs: Option<Vec<models::SnsConfig>>,
    #[serde(rename = "telegram_configs", skip_serializing_if = "Option::is_none")]
    pub telegram_configs: Option<Vec<models::TelegramConfig>>,
    #[serde(rename = "victorops_configs", skip_serializing_if = "Option::is_none")]
    pub victorops_configs: Option<Vec<models::VictorOpsConfig>>,
    #[serde(rename = "webex_configs", skip_serializing_if = "Option::is_none")]
    pub webex_configs: Option<Vec<models::WebexConfig>>,
    #[serde(rename = "webhook_configs", skip_serializing_if = "Option::is_none")]
    pub webhook_configs: Option<Vec<models::WebhookConfig>>,
    #[serde(rename = "wechat_configs", skip_serializing_if = "Option::is_none")]
    pub wechat_configs: Option<Vec<models::WechatConfig>>,
}

impl GettableApiReceiver {
    pub fn new() -> GettableApiReceiver {
        GettableApiReceiver {
            discord_configs: None,
            email_configs: None,
            grafana_managed_receiver_configs: None,
            msteams_configs: None,
            name: None,
            opsgenie_configs: None,
            pagerduty_configs: None,
            pushover_configs: None,
            slack_configs: None,
            sns_configs: None,
            telegram_configs: None,
            victorops_configs: None,
            webex_configs: None,
            webhook_configs: None,
            wechat_configs: None,
        }
    }
}

