/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateDashboardSnapshotCommand {
    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources +optional
    #[serde(rename = "apiVersion", skip_serializing_if = "Option::is_none")]
    pub api_version: Option<String>,
    #[serde(rename = "dashboard")]
    pub dashboard: Box<models::Unstructured>,
    /// Unique key used to delete the snapshot. It is different from the `key` so that only the creator can delete the snapshot. Required if `external` is `true`.
    #[serde(rename = "deleteKey", skip_serializing_if = "Option::is_none")]
    pub delete_key: Option<String>,
    /// When the snapshot should expire in seconds in seconds. Default is never to expire.
    #[serde(rename = "expires", skip_serializing_if = "Option::is_none")]
    pub expires: Option<i64>,
    /// these are passed when storing an external snapshot ref Save the snapshot on an external server rather than locally.
    #[serde(rename = "external", skip_serializing_if = "Option::is_none")]
    pub external: Option<bool>,
    /// Define the unique key. Required if `external` is `true`.
    #[serde(rename = "key", skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds +optional
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Snapshot name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

impl CreateDashboardSnapshotCommand {
    pub fn new(dashboard: models::Unstructured) -> CreateDashboardSnapshotCommand {
        CreateDashboardSnapshotCommand {
            api_version: None,
            dashboard: Box::new(dashboard),
            delete_key: None,
            expires: None,
            external: None,
            key: None,
            kind: None,
            name: None,
        }
    }
}

