/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ImportDashboardRequest {
    #[serde(rename = "dashboard", skip_serializing_if = "Option::is_none")]
    pub dashboard: Option<serde_json::Value>,
    /// Deprecated: use FolderUID instead
    #[serde(rename = "folderId", skip_serializing_if = "Option::is_none")]
    pub folder_id: Option<i64>,
    #[serde(rename = "folderUid", skip_serializing_if = "Option::is_none")]
    pub folder_uid: Option<String>,
    #[serde(rename = "inputs", skip_serializing_if = "Option::is_none")]
    pub inputs: Option<Vec<models::ImportDashboardInput>>,
    #[serde(rename = "overwrite", skip_serializing_if = "Option::is_none")]
    pub overwrite: Option<bool>,
    #[serde(rename = "path", skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(rename = "pluginId", skip_serializing_if = "Option::is_none")]
    pub plugin_id: Option<String>,
}

impl ImportDashboardRequest {
    pub fn new() -> ImportDashboardRequest {
        ImportDashboardRequest {
            dashboard: None,
            folder_id: None,
            folder_uid: None,
            inputs: None,
            overwrite: None,
            path: None,
            plugin_id: None,
        }
    }
}

