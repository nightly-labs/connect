/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TempUserDto {
    #[serde(rename = "code", skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(rename = "createdOn", skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "emailSent", skip_serializing_if = "Option::is_none")]
    pub email_sent: Option<bool>,
    #[serde(rename = "emailSentOn", skip_serializing_if = "Option::is_none")]
    pub email_sent_on: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(rename = "invitedByEmail", skip_serializing_if = "Option::is_none")]
    pub invited_by_email: Option<String>,
    #[serde(rename = "invitedByLogin", skip_serializing_if = "Option::is_none")]
    pub invited_by_login: Option<String>,
    #[serde(rename = "invitedByName", skip_serializing_if = "Option::is_none")]
    pub invited_by_name: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "orgId", skip_serializing_if = "Option::is_none")]
    pub org_id: Option<i64>,
    #[serde(rename = "role", skip_serializing_if = "Option::is_none")]
    pub role: Option<Role>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

impl TempUserDto {
    pub fn new() -> TempUserDto {
        TempUserDto {
            code: None,
            created_on: None,
            email: None,
            email_sent: None,
            email_sent_on: None,
            id: None,
            invited_by_email: None,
            invited_by_login: None,
            invited_by_name: None,
            name: None,
            org_id: None,
            role: None,
            status: None,
            url: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "None")]
    None,
    #[serde(rename = "Viewer")]
    Viewer,
    #[serde(rename = "Editor")]
    Editor,
    #[serde(rename = "Admin")]
    Admin,
}

impl Default for Role {
    fn default() -> Role {
        Self::None
    }
}

