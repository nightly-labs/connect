/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SlackConfig {
    #[serde(rename = "actions", skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<models::SlackAction>>,
    #[serde(rename = "api_url", skip_serializing_if = "Option::is_none")]
    pub api_url: Option<Box<models::Url>>,
    #[serde(rename = "api_url_file", skip_serializing_if = "Option::is_none")]
    pub api_url_file: Option<String>,
    #[serde(rename = "callback_id", skip_serializing_if = "Option::is_none")]
    pub callback_id: Option<String>,
    /// Slack channel override, (like #other-channel or @username).
    #[serde(rename = "channel", skip_serializing_if = "Option::is_none")]
    pub channel: Option<String>,
    #[serde(rename = "color", skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    #[serde(rename = "fallback", skip_serializing_if = "Option::is_none")]
    pub fallback: Option<String>,
    #[serde(rename = "fields", skip_serializing_if = "Option::is_none")]
    pub fields: Option<Vec<models::SlackField>>,
    #[serde(rename = "footer", skip_serializing_if = "Option::is_none")]
    pub footer: Option<String>,
    #[serde(rename = "http_config", skip_serializing_if = "Option::is_none")]
    pub http_config: Option<Box<models::HttpClientConfig>>,
    #[serde(rename = "icon_emoji", skip_serializing_if = "Option::is_none")]
    pub icon_emoji: Option<String>,
    #[serde(rename = "icon_url", skip_serializing_if = "Option::is_none")]
    pub icon_url: Option<String>,
    #[serde(rename = "image_url", skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(rename = "link_names", skip_serializing_if = "Option::is_none")]
    pub link_names: Option<bool>,
    #[serde(rename = "mrkdwn_in", skip_serializing_if = "Option::is_none")]
    pub mrkdwn_in: Option<Vec<String>>,
    #[serde(rename = "pretext", skip_serializing_if = "Option::is_none")]
    pub pretext: Option<String>,
    #[serde(rename = "send_resolved", skip_serializing_if = "Option::is_none")]
    pub send_resolved: Option<bool>,
    #[serde(rename = "short_fields", skip_serializing_if = "Option::is_none")]
    pub short_fields: Option<bool>,
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[serde(rename = "thumb_url", skip_serializing_if = "Option::is_none")]
    pub thumb_url: Option<String>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "title_link", skip_serializing_if = "Option::is_none")]
    pub title_link: Option<String>,
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

impl SlackConfig {
    pub fn new() -> SlackConfig {
        SlackConfig {
            actions: None,
            api_url: None,
            api_url_file: None,
            callback_id: None,
            channel: None,
            color: None,
            fallback: None,
            fields: None,
            footer: None,
            http_config: None,
            icon_emoji: None,
            icon_url: None,
            image_url: None,
            link_names: None,
            mrkdwn_in: None,
            pretext: None,
            send_resolved: None,
            short_fields: None,
            text: None,
            thumb_url: None,
            title: None,
            title_link: None,
            username: None,
        }
    }
}

