/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// PublicError : PublicError is derived from Error and only contains information available to the end user.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PublicError {
    /// Extra Additional information about the error
    #[serde(rename = "extra", skip_serializing_if = "Option::is_none")]
    pub extra: Option<std::collections::HashMap<String, serde_json::Value>>,
    /// Message A human readable message
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// MessageID A unique identifier for the error
    #[serde(rename = "messageId")]
    pub message_id: String,
    /// StatusCode The HTTP status code returned
    #[serde(rename = "statusCode")]
    pub status_code: i64,
}

impl PublicError {
    /// PublicError is derived from Error and only contains information available to the end user.
    pub fn new(message_id: String, status_code: i64) -> PublicError {
        PublicError {
            extra: None,
            message: None,
            message_id,
            status_code,
        }
    }
}

