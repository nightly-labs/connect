/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorResponseBody {
    /// Error An optional detailed description of the actual error. Only included if running in developer mode.
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    /// a human readable version of the error
    #[serde(rename = "message")]
    pub message: String,
    /// Status An optional status to denote the cause of the error.  For example, a 412 Precondition Failed error may include additional information of why that error happened.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

impl ErrorResponseBody {
    pub fn new(message: String) -> ErrorResponseBody {
        ErrorResponseBody {
            error: None,
            message,
            status: None,
        }
    }
}

