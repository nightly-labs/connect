/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TokenDto {
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[serde(rename = "expiration", skip_serializing_if = "Option::is_none")]
    pub expiration: Option<String>,
    #[serde(rename = "hasExpired", skip_serializing_if = "Option::is_none")]
    pub has_expired: Option<bool>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(rename = "isRevoked", skip_serializing_if = "Option::is_none")]
    pub is_revoked: Option<bool>,
    #[serde(rename = "lastUsedAt", skip_serializing_if = "Option::is_none")]
    pub last_used_at: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "secondsUntilExpiration", skip_serializing_if = "Option::is_none")]
    pub seconds_until_expiration: Option<f64>,
}

impl TokenDto {
    pub fn new() -> TokenDto {
        TokenDto {
            created: None,
            expiration: None,
            has_expired: None,
            id: None,
            is_revoked: None,
            last_used_at: None,
            name: None,
            seconds_until_expiration: None,
        }
    }
}

