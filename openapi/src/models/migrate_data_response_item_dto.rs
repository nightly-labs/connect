/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MigrateDataResponseItemDto {
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    #[serde(rename = "refId")]
    pub ref_id: String,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "type")]
    pub r#type: Type,
}

impl MigrateDataResponseItemDto {
    pub fn new(ref_id: String, status: Status, r#type: Type) -> MigrateDataResponseItemDto {
        MigrateDataResponseItemDto {
            error: None,
            ref_id,
            status,
            r#type,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "OK")]
    Ok,
    #[serde(rename = "ERROR")]
    Error,
}

impl Default for Status {
    fn default() -> Status {
        Self::Ok
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "DASHBOARD")]
    Dashboard,
    #[serde(rename = "DATASOURCE")]
    Datasource,
    #[serde(rename = "FOLDER")]
    Folder,
}

impl Default for Type {
    fn default() -> Type {
        Self::Dashboard
    }
}

