/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SnsConfig {
    #[serde(rename = "api_url", skip_serializing_if = "Option::is_none")]
    pub api_url: Option<String>,
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "http_config", skip_serializing_if = "Option::is_none")]
    pub http_config: Option<Box<models::HttpClientConfig>>,
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "phone_number", skip_serializing_if = "Option::is_none")]
    pub phone_number: Option<String>,
    #[serde(rename = "send_resolved", skip_serializing_if = "Option::is_none")]
    pub send_resolved: Option<bool>,
    #[serde(rename = "sigv4", skip_serializing_if = "Option::is_none")]
    pub sigv4: Option<Box<models::SigV4Config>>,
    #[serde(rename = "subject", skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    #[serde(rename = "target_arn", skip_serializing_if = "Option::is_none")]
    pub target_arn: Option<String>,
    #[serde(rename = "topic_arn", skip_serializing_if = "Option::is_none")]
    pub topic_arn: Option<String>,
}

impl SnsConfig {
    pub fn new() -> SnsConfig {
        SnsConfig {
            api_url: None,
            attributes: None,
            http_config: None,
            message: None,
            phone_number: None,
            send_resolved: None,
            sigv4: None,
            subject: None,
            target_arn: None,
            topic_arn: None,
        }
    }
}

