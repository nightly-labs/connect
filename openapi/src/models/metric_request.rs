/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetricRequest {
    #[serde(rename = "debug", skip_serializing_if = "Option::is_none")]
    pub debug: Option<bool>,
    /// From Start time in epoch timestamps in milliseconds or relative using Grafana time units.
    #[serde(rename = "from")]
    pub from: String,
    /// queries.refId – Specifies an identifier of the query. Is optional and default to “A”. queries.datasourceId – Specifies the data source to be queried. Each query in the request must have an unique datasourceId. queries.maxDataPoints - Species maximum amount of data points that dashboard panel can render. Is optional and default to 100. queries.intervalMs - Specifies the time interval in milliseconds of time series. Is optional and defaults to 1000.
    #[serde(rename = "queries")]
    pub queries: Vec<serde_json::Value>,
    /// To End time in epoch timestamps in milliseconds or relative using Grafana time units.
    #[serde(rename = "to")]
    pub to: String,
}

impl MetricRequest {
    pub fn new(from: String, queries: Vec<serde_json::Value>, to: String) -> MetricRequest {
        MetricRequest {
            debug: None,
            from,
            queries,
            to,
        }
    }
}

