/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GettableSilence {
    /// comment
    #[serde(rename = "comment")]
    pub comment: String,
    /// created by
    #[serde(rename = "createdBy")]
    pub created_by: String,
    /// ends at
    #[serde(rename = "endsAt")]
    pub ends_at: String,
    /// id
    #[serde(rename = "id")]
    pub id: String,
    /// Matchers matchers
    #[serde(rename = "matchers")]
    pub matchers: Vec<models::Matcher>,
    /// starts at
    #[serde(rename = "startsAt")]
    pub starts_at: String,
    #[serde(rename = "status")]
    pub status: Box<models::SilenceStatus>,
    /// updated at
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
}

impl GettableSilence {
    pub fn new(comment: String, created_by: String, ends_at: String, id: String, matchers: Vec<models::Matcher>, starts_at: String, status: models::SilenceStatus, updated_at: String) -> GettableSilence {
        GettableSilence {
            comment,
            created_by,
            ends_at,
            id,
            matchers,
            starts_at,
            status: Box::new(status),
            updated_at,
        }
    }
}

