/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// Rule : adapted from cortex
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Rule {
    #[serde(rename = "evaluationTime", skip_serializing_if = "Option::is_none")]
    pub evaluation_time: Option<f64>,
    #[serde(rename = "health")]
    pub health: String,
    /// The custom marshaling for labels.Labels ends up doing this anyways.
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "lastError", skip_serializing_if = "Option::is_none")]
    pub last_error: Option<String>,
    #[serde(rename = "lastEvaluation", skip_serializing_if = "Option::is_none")]
    pub last_evaluation: Option<String>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "query")]
    pub query: String,
    #[serde(rename = "type")]
    pub r#type: String,
}

impl Rule {
    /// adapted from cortex
    pub fn new(health: String, name: String, query: String, r#type: String) -> Rule {
        Rule {
            evaluation_time: None,
            health,
            labels: None,
            last_error: None,
            last_evaluation: None,
            name,
            query,
            r#type,
        }
    }
}

