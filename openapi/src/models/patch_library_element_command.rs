/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// PatchLibraryElementCommand : PatchLibraryElementCommand is the command for patching a LibraryElement
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PatchLibraryElementCommand {
    /// ID of the folder where the library element is stored.  Deprecated: use FolderUID instead
    #[serde(rename = "folderId", skip_serializing_if = "Option::is_none")]
    pub folder_id: Option<i64>,
    /// UID of the folder where the library element is stored.
    #[serde(rename = "folderUid", skip_serializing_if = "Option::is_none")]
    pub folder_uid: Option<String>,
    /// Kind of element to create, Use 1 for library panels or 2 for c. Description: 1 - library panels 2 - library variables
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<Kind>,
    /// The JSON model for the library element.
    #[serde(rename = "model", skip_serializing_if = "Option::is_none")]
    pub model: Option<serde_json::Value>,
    /// Name of the library element.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "uid", skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
    /// Version of the library element you are updating.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i64>,
}

impl PatchLibraryElementCommand {
    /// PatchLibraryElementCommand is the command for patching a LibraryElement
    pub fn new() -> PatchLibraryElementCommand {
        PatchLibraryElementCommand {
            folder_id: None,
            folder_uid: None,
            kind: None,
            model: None,
            name: None,
            uid: None,
            version: None,
        }
    }
}
/// Kind of element to create, Use 1 for library panels or 2 for c. Description: 1 - library panels 2 - library variables
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Kind {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
}

impl Default for Kind {
    fn default() -> Kind {
        Self::Variant1
    }
}

