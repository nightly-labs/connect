/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// CreateCorrelationCommand : CreateCorrelationCommand is the command for creating a correlation
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateCorrelationCommand {
    #[serde(rename = "config", skip_serializing_if = "Option::is_none")]
    pub config: Option<Box<models::CorrelationConfig>>,
    /// Optional description of the correlation
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Optional label identifying the correlation
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// True if correlation was created with provisioning. This makes it read-only.
    #[serde(rename = "provisioned", skip_serializing_if = "Option::is_none")]
    pub provisioned: Option<bool>,
    /// Target data source UID to which the correlation is created. required if config.type = query
    #[serde(rename = "targetUID", skip_serializing_if = "Option::is_none")]
    pub target_uid: Option<String>,
}

impl CreateCorrelationCommand {
    /// CreateCorrelationCommand is the command for creating a correlation
    pub fn new() -> CreateCorrelationCommand {
        CreateCorrelationCommand {
            config: None,
            description: None,
            label: None,
            provisioned: None,
            target_uid: None,
        }
    }
}

