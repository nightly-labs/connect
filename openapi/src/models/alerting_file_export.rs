/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlertingFileExport {
    #[serde(rename = "apiVersion", skip_serializing_if = "Option::is_none")]
    pub api_version: Option<i64>,
    #[serde(rename = "contactPoints", skip_serializing_if = "Option::is_none")]
    pub contact_points: Option<Vec<models::ContactPointExport>>,
    #[serde(rename = "groups", skip_serializing_if = "Option::is_none")]
    pub groups: Option<Vec<models::AlertRuleGroupExport>>,
    #[serde(rename = "muteTimes", skip_serializing_if = "Option::is_none")]
    pub mute_times: Option<Vec<models::MuteTimeIntervalExport>>,
    #[serde(rename = "policies", skip_serializing_if = "Option::is_none")]
    pub policies: Option<Vec<models::NotificationPolicyExport>>,
}

impl AlertingFileExport {
    pub fn new() -> AlertingFileExport {
        AlertingFileExport {
            api_version: None,
            contact_points: None,
            groups: None,
            mute_times: None,
            policies: None,
        }
    }
}

