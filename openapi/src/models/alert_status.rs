/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// AlertStatus : AlertStatus alert status
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlertStatus {
    /// inhibited by
    #[serde(rename = "inhibitedBy")]
    pub inhibited_by: Vec<String>,
    /// silenced by
    #[serde(rename = "silencedBy")]
    pub silenced_by: Vec<String>,
    /// state
    #[serde(rename = "state")]
    pub state: State,
}

impl AlertStatus {
    /// AlertStatus alert status
    pub fn new(inhibited_by: Vec<String>, silenced_by: Vec<String>, state: State) -> AlertStatus {
        AlertStatus {
            inhibited_by,
            silenced_by,
            state,
        }
    }
}
/// state
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "[unprocessed active suppressed]")]
    LeftSquareBracketUnprocessedActiveSuppressedRightSquareBracket,
}

impl Default for State {
    fn default() -> State {
        Self::LeftSquareBracketUnprocessedActiveSuppressedRightSquareBracket
    }
}

