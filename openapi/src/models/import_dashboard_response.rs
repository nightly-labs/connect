/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ImportDashboardResponse {
    #[serde(rename = "dashboardId", skip_serializing_if = "Option::is_none")]
    pub dashboard_id: Option<i64>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Deprecated: use FolderUID instead
    #[serde(rename = "folderId", skip_serializing_if = "Option::is_none")]
    pub folder_id: Option<i64>,
    #[serde(rename = "folderUid", skip_serializing_if = "Option::is_none")]
    pub folder_uid: Option<String>,
    #[serde(rename = "imported", skip_serializing_if = "Option::is_none")]
    pub imported: Option<bool>,
    #[serde(rename = "importedRevision", skip_serializing_if = "Option::is_none")]
    pub imported_revision: Option<i64>,
    #[serde(rename = "importedUri", skip_serializing_if = "Option::is_none")]
    pub imported_uri: Option<String>,
    #[serde(rename = "importedUrl", skip_serializing_if = "Option::is_none")]
    pub imported_url: Option<String>,
    #[serde(rename = "path", skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(rename = "pluginId", skip_serializing_if = "Option::is_none")]
    pub plugin_id: Option<String>,
    #[serde(rename = "removed", skip_serializing_if = "Option::is_none")]
    pub removed: Option<bool>,
    #[serde(rename = "revision", skip_serializing_if = "Option::is_none")]
    pub revision: Option<i64>,
    #[serde(rename = "slug", skip_serializing_if = "Option::is_none")]
    pub slug: Option<String>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "uid", skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

impl ImportDashboardResponse {
    pub fn new() -> ImportDashboardResponse {
        ImportDashboardResponse {
            dashboard_id: None,
            description: None,
            folder_id: None,
            folder_uid: None,
            imported: None,
            imported_revision: None,
            imported_uri: None,
            imported_url: None,
            path: None,
            plugin_id: None,
            removed: None,
            revision: None,
            slug: None,
            title: None,
            uid: None,
        }
    }
}

