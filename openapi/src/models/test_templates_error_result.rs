/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestTemplatesErrorResult {
    /// Kind of template error that occurred.
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<Kind>,
    /// Error message.
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Name of the associated template for this error. Will be empty if the Kind is \"invalid_template\".
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

impl TestTemplatesErrorResult {
    pub fn new() -> TestTemplatesErrorResult {
        TestTemplatesErrorResult {
            kind: None,
            message: None,
            name: None,
        }
    }
}
/// Kind of template error that occurred.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Kind {
    #[serde(rename = "invalid_template")]
    InvalidTemplate,
    #[serde(rename = "execution_error")]
    ExecutionError,
}

impl Default for Kind {
    fn default() -> Kind {
        Self::InvalidTemplate
    }
}

