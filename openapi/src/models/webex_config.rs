/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebexConfig {
    #[serde(rename = "api_url", skip_serializing_if = "Option::is_none")]
    pub api_url: Option<Box<models::Url>>,
    #[serde(rename = "http_config", skip_serializing_if = "Option::is_none")]
    pub http_config: Option<Box<models::HttpClientConfig>>,
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "room_id", skip_serializing_if = "Option::is_none")]
    pub room_id: Option<String>,
    #[serde(rename = "send_resolved", skip_serializing_if = "Option::is_none")]
    pub send_resolved: Option<bool>,
}

impl WebexConfig {
    pub fn new() -> WebexConfig {
        WebexConfig {
            api_url: None,
            http_config: None,
            message: None,
            room_id: None,
            send_resolved: None,
        }
    }
}

