/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// JsonWebKey : JSONWebKey represents a public or private key in JWK format. It can be marshaled into JSON and unmarshaled from JSON.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct JsonWebKey {
    /// Key algorithm, parsed from `alg` header.
    #[serde(rename = "Algorithm", skip_serializing_if = "Option::is_none")]
    pub algorithm: Option<String>,
    /// X.509 certificate thumbprint (SHA-1), parsed from `x5t` header.
    #[serde(rename = "CertificateThumbprintSHA1", skip_serializing_if = "Option::is_none")]
    pub certificate_thumbprint_sha1: Option<Vec<i32>>,
    /// X.509 certificate thumbprint (SHA-256), parsed from `x5t#S256` header.
    #[serde(rename = "CertificateThumbprintSHA256", skip_serializing_if = "Option::is_none")]
    pub certificate_thumbprint_sha256: Option<Vec<i32>>,
    /// X.509 certificate chain, parsed from `x5c` header.
    #[serde(rename = "Certificates", skip_serializing_if = "Option::is_none")]
    pub certificates: Option<Vec<models::Certificate>>,
    #[serde(rename = "CertificatesURL", skip_serializing_if = "Option::is_none")]
    pub certificates_url: Option<Box<models::Url>>,
    /// Key is the Go in-memory representation of this key. It must have one of these types: ed25519.PublicKey ed25519.PrivateKey ecdsa.PublicKey ecdsa.PrivateKey rsa.PublicKey rsa.PrivateKey []byte (a symmetric key)  When marshaling this JSONWebKey into JSON, the \"kty\" header parameter will be automatically set based on the type of this field.
    #[serde(rename = "Key", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub key: Option<Option<serde_json::Value>>,
    /// Key identifier, parsed from `kid` header.
    #[serde(rename = "KeyID", skip_serializing_if = "Option::is_none")]
    pub key_id: Option<String>,
    /// Key use, parsed from `use` header.
    #[serde(rename = "Use", skip_serializing_if = "Option::is_none")]
    pub r#use: Option<String>,
}

impl JsonWebKey {
    /// JSONWebKey represents a public or private key in JWK format. It can be marshaled into JSON and unmarshaled from JSON.
    pub fn new() -> JsonWebKey {
        JsonWebKey {
            algorithm: None,
            certificate_thumbprint_sha1: None,
            certificate_thumbprint_sha256: None,
            certificates: None,
            certificates_url: None,
            key: None,
            key_id: None,
            r#use: None,
        }
    }
}

