/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// PostableAlert : PostableAlert postable alert
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PostableAlert {
    /// LabelSet label set
    #[serde(rename = "annotations", skip_serializing_if = "Option::is_none")]
    pub annotations: Option<std::collections::HashMap<String, String>>,
    /// ends at Format: date-time
    #[serde(rename = "endsAt", skip_serializing_if = "Option::is_none")]
    pub ends_at: Option<String>,
    /// generator URL Format: uri
    #[serde(rename = "generatorURL", skip_serializing_if = "Option::is_none")]
    pub generator_url: Option<String>,
    /// LabelSet label set
    #[serde(rename = "labels")]
    pub labels: std::collections::HashMap<String, String>,
    /// starts at Format: date-time
    #[serde(rename = "startsAt", skip_serializing_if = "Option::is_none")]
    pub starts_at: Option<String>,
}

impl PostableAlert {
    /// PostableAlert postable alert
    pub fn new(labels: std::collections::HashMap<String, String>) -> PostableAlert {
        PostableAlert {
            annotations: None,
            ends_at: None,
            generator_url: None,
            labels,
            starts_at: None,
        }
    }
}

