/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PostDashboard200Response {
    /// FolderUID The unique identifier (uid) of the folder the dashboard belongs to.
    #[serde(rename = "folderUid", skip_serializing_if = "Option::is_none")]
    pub folder_uid: Option<String>,
    /// ID The unique identifier (id) of the created/updated dashboard.
    #[serde(rename = "id")]
    pub id: i64,
    /// Status status of the response.
    #[serde(rename = "status")]
    pub status: String,
    /// Slug The slug of the dashboard.
    #[serde(rename = "title")]
    pub title: String,
    /// UID The unique identifier (uid) of the created/updated dashboard.
    #[serde(rename = "uid")]
    pub uid: String,
    /// URL The relative URL for accessing the created/updated dashboard.
    #[serde(rename = "url")]
    pub url: String,
    /// Version The version of the dashboard.
    #[serde(rename = "version")]
    pub version: i64,
}

impl PostDashboard200Response {
    pub fn new(id: i64, status: String, title: String, uid: String, url: String, version: i64) -> PostDashboard200Response {
        PostDashboard200Response {
            folder_uid: None,
            id,
            status,
            title,
            uid,
            url,
            version,
        }
    }
}

