/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReportSchedule {
    #[serde(rename = "dayOfMonth", skip_serializing_if = "Option::is_none")]
    pub day_of_month: Option<String>,
    #[serde(rename = "endDate", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    #[serde(rename = "frequency", skip_serializing_if = "Option::is_none")]
    pub frequency: Option<String>,
    #[serde(rename = "intervalAmount", skip_serializing_if = "Option::is_none")]
    pub interval_amount: Option<i64>,
    #[serde(rename = "intervalFrequency", skip_serializing_if = "Option::is_none")]
    pub interval_frequency: Option<String>,
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(rename = "timeZone", skip_serializing_if = "Option::is_none")]
    pub time_zone: Option<String>,
    #[serde(rename = "workdaysOnly", skip_serializing_if = "Option::is_none")]
    pub workdays_only: Option<bool>,
}

impl ReportSchedule {
    pub fn new() -> ReportSchedule {
        ReportSchedule {
            day_of_month: None,
            end_date: None,
            frequency: None,
            interval_amount: None,
            interval_frequency: None,
            start_date: None,
            time_zone: None,
            workdays_only: None,
        }
    }
}

