/*
 * Grafana HTTP API.
 *
 * The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hello@grafana.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// EmbeddedContactPoint : EmbeddedContactPoint is the contact point type that is used by grafanas embedded alertmanager implementation.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EmbeddedContactPoint {
    #[serde(rename = "disableResolveMessage", skip_serializing_if = "Option::is_none")]
    pub disable_resolve_message: Option<bool>,
    /// Name is used as grouping key in the UI. Contact points with the same name will be grouped in the UI.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "provenance", skip_serializing_if = "Option::is_none")]
    pub provenance: Option<String>,
    #[serde(rename = "settings")]
    pub settings: serde_json::Value,
    #[serde(rename = "type")]
    pub r#type: Type,
    /// UID is the unique identifier of the contact point. The UID can be set by the user.
    #[serde(rename = "uid", skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

impl EmbeddedContactPoint {
    /// EmbeddedContactPoint is the contact point type that is used by grafanas embedded alertmanager implementation.
    pub fn new(settings: serde_json::Value, r#type: Type) -> EmbeddedContactPoint {
        EmbeddedContactPoint {
            disable_resolve_message: None,
            name: None,
            provenance: None,
            settings,
            r#type,
            uid: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "alertmanager")]
    Alertmanager,
    #[serde(rename = " dingding")]
    Dingding,
    #[serde(rename = " discord")]
    Discord,
    #[serde(rename = " email")]
    Email,
    #[serde(rename = " googlechat")]
    Googlechat,
    #[serde(rename = " kafka")]
    Kafka,
    #[serde(rename = " line")]
    Line,
    #[serde(rename = " opsgenie")]
    Opsgenie,
    #[serde(rename = " pagerduty")]
    Pagerduty,
    #[serde(rename = " pushover")]
    Pushover,
    #[serde(rename = " sensugo")]
    Sensugo,
    #[serde(rename = " slack")]
    Slack,
    #[serde(rename = " teams")]
    Teams,
    #[serde(rename = " telegram")]
    Telegram,
    #[serde(rename = " threema")]
    Threema,
    #[serde(rename = " victorops")]
    Victorops,
    #[serde(rename = " webhook")]
    Webhook,
    #[serde(rename = " wecom")]
    Wecom,
}

impl Default for Type {
    fn default() -> Type {
        Self::Alertmanager
    }
}

